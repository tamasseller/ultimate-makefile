#
# Determine the number of cores and set optimal number parallel jobs.
#

SHELL = /bin/bash										# Force using bash in case it would be set to /bin/sh by default.
JOBS ?= $(shell echo $$(($(shell nproc || echo 1)+1)))	# Use bash arithmetic expansion to add one to the number of cores.
MAKEFLAGS += -j $(JOBS)									# Add -j <number of CPUs plus one> to the argument list.

#
# See what system we are runnning on
#

sys = $(shell uname -a)

# Enable cmake like VERBOSE=1 command line argument
ULTIMATE_DEBUG?=$(VERBOSE)

# Test if system is Cygwin
ifneq (,$(findstring Cygwin, $(sys)))

# Pick C or C++ compiler to check wether its platform is Cygwin or not.
TEST_COMPILER = $(CXX)									
ifeq ($(TEST_COMPILER),) 
TEST_COMPILER = $(CC)
endif

COMPILER_PLATFORM = $(shell $(TEST_COMPILER) -dumpmachine)
ifneq (,$(findstring cygwin, $(COMPILER_PLATFORM)))
ifneq ($(ULTIMATE_DEBUG),) 
$(info Assuming Cygwin enviroment and Cygwin target winpath modifications are **NOT** used) 
endif
winpath?=$1
else
ifneq ($(ULTIMATE_DEBUG),) 
$(info Assuming Cygwin enviroment (uname -a returns "$(sys)") => winpath modifications are used) 
endif
winpath_pre= $(addprefix ', $1)
winpath_post= $(addsuffix ', $1)
winpath=$(if $(strip $1), $(call winpath_pre, $(call winpath_post, $(shell cygpath -wa $(strip $1)))))
endif

else
ifneq ($(ULTIMATE_DEBUG),)
$(info Assuming we are not using Cygwin enviroment (uname -a returns "$(sys)") => no winpath modifications are used)
endif
winpath?=$1
endif

#
# Post build tool flag default
#

OBJCOPYFLAGS?=ihex
OBJSIZEFLAGS?=--format=berkeley

#
# Convert header and library setting to gcc command line arguments. 
#

ifndef OBJDIR
OBJDIR = .o
endif

LIBFLAGS = $(addprefix -l, $(LIBS))
LIBDIRFLAGS = $(addprefix -L, $(call winpath, $(LIB_DIRS)))
INCDIRFLAGS = $(addprefix -I, $(call winpath, $(INCLUDE_DIRS)))

#
# Construct build commands and add dependency info generation arguments.
#

DEPFLAGS = -MT $@ -MMD -MP -MF $(OBJDIR)/$*.Td

CC_WITH_FLAGS += $(CC) $(DEPFLAGS) $(CFLAGS) $(INCDIRFLAGS)
CXX_WITH_FLAGS += $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(INCDIRFLAGS)
WINDRES_WITH_FLAGS += $(WINDRES) $(addprefix --preprocessor-arg=, $(DEPFLAGS)) $(INCDIRFLAGS)
ASM_WITH_FLAGS += $(ASM) $(DEPFLAGS) $(ASMFLAGS) $(INCDIRFLAGS)

#
# Convert source file path to absolute.
#

ABS_SOURCES = $(abspath $(SOURCES))
ABS_RESOURCES = $(abspath $(RESOURCES))

#
# Generate the names of object files.
#

OBJS += $(addsuffix .o, $(ABS_SOURCES))
OBJS += $(addsuffix .res.o, $(ABS_RESOURCES))

#
# Switching shell coloring off for in-IDE builds. 
#

ifeq ($(ULTIMATE_DEBUG),)
NCOLORS = $(shell tput colors 2>/dev/null)
endif

ifeq ($(NO_PRETTY),)
ifneq ($(NCOLORS),)
RED_COLOR = \e[1;31m
GREEN_COLOR = \e[1;32m
YELLOW_COLOR = \e[1;33m
PURPLE_COLOR = \e[1;35m
BLUE_COLOR = \e[1;36m
WHITE_COLOR = \e[1;37m
RESET_COLOR = \e[0m
S = @
P = printf
else
P = :
endif
else
S = @
P = printf
endif

#
# The actual rules to make the output
#

.SUFFIXES:
	MAKEFLAGS += -r

all: $(OUTPUT) $(OUTLIB)

OBJS_WITH_PATH = $(addprefix $(OBJDIR)/, $(OBJS))

$(OUTPUT): $(OBJS_WITH_PATH) $(ADDITIONAL_DEPS) $(OBJDIR)/.LAST_FLAGS
	@$P 'Linking $(BLUE_COLOR)$(notdir $@)$(RESET_COLOR)\n'
	$S$(strip $(or $(FINALLD),$(LD)) $(OBJS_WITH_PATH) $(LDFLAGS) $(LIBFLAGS) $(LIBDIRFLAGS) -o $@)
ifneq ($(strip $(OBJSIZE)),)
	$S$(strip $(OBJSIZE) $(strip $(OBJSIZEFLAGS)) $@)
endif

$(OUTLIB): $(OBJS_WITH_PATH) $(ADDITIONAL_DEPS) $(OBJDIR)/.LAST_FLAGS
	@$P 'Creating static library $(BLUE_COLOR)$(notdir $@)$(RESET_COLOR)\n'
	$S$(strip $(AR) rcs $@ $(OBJS_WITH_PATH))
	
$(OBJDIR)/%.S.o: %.S $(MAKEFILE_LIST)
$(OBJDIR)/%.S.o: %.S $(OBJDIR)/%.d $(MAKEFILE_LIST) $(OBJDIR)/.LAST_FLAGS
	@$P 'Compiling $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$S$(strip $(ASM_WITH_FLAGS) $($(shell echo $(notdir $<) | tr a-z. A-Z_ )_FLAGS) -c -o $@ $(call winpath,$<))

$(OBJDIR)/%.c.o: %.c $(MAKEFILE_LIST)
$(OBJDIR)/%.c.o: %.c $(OBJDIR)/%.d $(MAKEFILE_LIST) $(OBJDIR)/.LAST_FLAGS
	@$P 'Compiling $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$S$(strip $(CC_WITH_FLAGS) $($(shell echo $(notdir $<) | tr a-z. A-Z_ )_FLAGS) -c -o $@ $(call winpath,$<))
	@mv -f $(OBJDIR)/$*.Td $(OBJDIR)/$*.d

$(OBJDIR)/%.cpp.o: %.cpp $(MAKEFILE_LIST)
$(OBJDIR)/%.cpp.o: %.cpp $(OBJDIR)/%.d $(MAKEFILE_LIST) $(OBJDIR)/.LAST_FLAGS
	@$P 'Compiling $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$S$(strip $(CXX_WITH_FLAGS) $($(shell echo $(notdir $<) | tr a-z. A-Z_ )_FLAGS) -c -o $@ $(call winpath,$<))
	@mv -f $(OBJDIR)/$*.Td $(OBJDIR)/$*.d

__DEFAULT_RESOURCE_SECTION = .rodata,alloc,load,readonly,data,contents

$(OBJDIR)/%.res.o: % $(MAKEFILE_LIST)
	@$P 'Objectifying $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$Scd $(dir $<) && \
	$(strip $(LD) -r -b binary -o $(abspath $@) $(notdir $<))
	$S$(OC) --rename-section .data=$(or $($(shell echo $(notdir $<) | tr a-z. A-Z_ )_SECTION),$(__DEFAULT_RESOURCE_SECTION)) $(abspath $@) $(abspath $@)
	
$(OBJDIR)/%.rc.o: %.rc $(MAKEFILE_LIST)
$(OBJDIR)/%.rc.o: %.rc $(OBJDIR)/%.d $(MAKEFILE_LIST)
	@$P 'Window$$ resource compiling $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$S$(WINDRES_WITH_FLAGS) $< -o $@
	@mv -f $(OBJDIR)/$*.Td $(OBJDIR)/$*.d

$(OBJDIR)/%.d: ;
.PRECIOUS: $(OBJDIR)/%.d

ifneq ($(strip $(OBJCOPY)),)
$(basename $(OUTPUT)).hex: $(OUTPUT)
	@$P 'Copying $(BLUE_COLOR)$(notdir $@)$(RESET_COLOR)\n'
	$S$(strip $(strip $(OBJCOPY)) -O $(strip $(OBJCOPYFLAGS)) $(OUTPUT) $(basename $(OUTPUT)).hex)
endif	

#
# Output complier flag dependency with temp file
#
.PHONY: flags
$(OBJDIR)/.LAST_FLAGS: flags
	@mkdir -p $(dir $@)
	$S echo '$(CFLAGS) $(CXXFLAGS) $(LDFLAGS)' | cmp -s - $@ || echo '$(CFLAGS) $(CXXFLAGS) $(LDFLAGS)' > $@

#
# Coverage info generation.
#

ifndef COVDIR
COVDIR = coverage
endif

ifndef COVFILE
COVFILE = $(COVDIR)/coverage.html
endif

ifndef COVROOT
COVROOT = ..
endif

check: $(OUTPUT)
	@rm -rf coverage
	@mkdir -p coverage
	@$P 'Testing $(PURPLE_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	$S$(TEST_CMD_PREFIX) $(abspath $(OUTPUT)) $(TEST_FLAGS)
	@$P 'Gcovr $(WHITE_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	$Sgcovr -r $(COVROOT) --html-details -o $(COVFILE) $(COVFLAGS)

#
# Clean rule, removes the output, coverage info and all temporary files.
#

mostlyclean:
	rm -rf $(OBJDIR) $(CLEAN_EXTRA) $(COVDIR)

clean: mostlyclean
	rm -rf $(or $(OUTPUT) $(OUTLIB))

#
# Include the dependency info.
#

-include $(patsubst %,$(OBJDIR)/%.d,$(basename $(ABS_SOURCES)))

#
# Define install rules
#

prefix = /usr/local
exec_prefix = ${prefix}
bindir = ${exec_prefix}/bin
libdir = ${exec_prefix}/lib
datarootdir = ${prefix}/share
datadir = ${datarootdir}
sysconfdir = ${prefix}/etc
includedir = ${prefix}/include

INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}

before-pre-install: all
	@$(PRE_INSTALL)

pre-install: before-pre-install

normal-install: pre-install
	@$(NORMAL_INSTALL)
	$S$(call deploy_program,$(DEPL_BIN),$(DESTDIR)${bindir})
	$S$(call deploy_data,$(DEPL_LIB),$(DESTDIR)${libdir})
	$S$(call deploy_data,$(DEPL_ETC),$(DESTDIR)${sysconfdir})
	$S$(call deploy_data,$(DEPL_SHARE),$(DESTDIR)${datadir})
	$S$(call deploy_data,$(DEPL_INCLUDE),$(DESTDIR)${includedir})
	@$(POST_INSTALL)

post-install: normal-install
install: post-install ;

before-pre-uninstall:
	@$(PRE_UNINSTALL)

pre-uninstall: before-pre-uninstall

normal-uninstall: pre-uninstall
	@$(NORMAL_UNINSTALL)
	$S$(call undeploy,$(DEPL_BIN),$(DESTDIR)${bindir})
	$S$(call undeploy,$(DEPL_LIB),$(DESTDIR)${libdir})
	$S$(call undeploy,$(DEPL_ETC),$(DESTDIR)${sysconfdir})
	$S$(call undeploy,$(DEPL_SHARE),$(DESTDIR)${datadir})
	$S$(call undeploy,$(DEPL_INCLUDE),$(DESTDIR)${includedir})
	@$(POST_UNINSTALL)

post-uninstall: normal-uninstall
uninstall: post-uninstall ;

depl_extract_dirs = $(sort $(foreach v, $(1), $(shell if [ -d $v ]; then echo $v; fi)))
depl_extract_files = $(sort $(foreach v, $(1), $(shell if [ ! -d $v ]; then echo $v; fi)))

depl_find_subdirs = $(addprefix $(notdir $1)/,$(shell find $1 -type d -printf '%P '))
depl_expand_subdirs = $(foreach v,$(call depl_extract_dirs,$1),$(notdir $v) $(call depl_find_subdirs,$v))
depl_create_dirs = mkdir -p $(abspath $2 $(addprefix $2/,$(call depl_expand_subdirs,$1)))
depl_remove_dirs = cd $2 $(foreach v,$(call depl_expand_subdirs,$1),&& rmdir --ignore-fail-on-non-empty -p $v )

depl_on_each_file_in_root = $(foreach v, $(call depl_extract_files,$2),$(call $1,$v,$3/$(notdir $v)))
depl_on_each_file_in_subdir  = $(foreach v, $(call depl_extract_dirs,$2),$(foreach w,$(shell find $v -type f -printf '%P '), $(call $1,$v/$w,$3/$(notdir $v)/$w)))
depl_on_each_file = $(call depl_on_each_file_in_subdir,$1,$2,$3) $(call depl_on_each_file_in_root,$1,$2,$3)

depl_invoke_install_data = && $P 'Installing $(GREEN_COLOR)$1 -> $2$(RESET_COLOR)\n' && $(INSTALL_DATA) "$1" "$2"
depl_invoke_install_program  = && $P 'Installing executable $(GREEN_COLOR)$1 -> $2$(RESET_COLOR)\n' && $(INSTALL_PROGRAM) "$1" "$2"
depl_invoke_remove = $P 'Removing $(RED_COLOR)$2$(RESET_COLOR)\n' && rm -f $2 &&

deploy_program = $(call depl_create_dirs,$1,$2) $(call depl_on_each_file,depl_invoke_install_program,$1,$2)
deploy_data = $(call depl_create_dirs,$1,$2) $(call depl_on_each_file,depl_invoke_install_data,$1,$2)
undeploy = $(call depl_on_each_file,depl_invoke_remove,$1,$2) $(call depl_remove_dirs,$1,$2)
