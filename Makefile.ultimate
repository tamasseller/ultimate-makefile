#
# Determine the number of cores and set optimal number parallel jobs.
#

SHELL = /bin/bash										# Force using bash in case it would be set to /bin/sh by default.
JOBS ?= $(shell echo $$(($(shell nproc || echo 1)+1)))	# Use bash arithmetic expansion to add one to the number of cores.
MAKEFLAGS += -j $(JOBS)									# Add -j <number of CPUs plus one> to the argument list. 

#
# Convert header and library setting to gcc command line arguments. 
#

ifndef OBJDIR
OBJDIR = .o
endif

LIBFLAGS = $(addprefix -l, $(LIBS))
LIBDIRFLAGS = $(addprefix -L, $(LIB_DIRS))
INCDIRFLAGS = $(addprefix -I, $(INCLUDE_DIRS))

#
# Construct build commands and add dependency info generation arguments.
#

DEPFLAGS = -MT $@ -MMD -MP -MF $(OBJDIR)/$*.Td

CC_WITH_FLAGS += $(CC) $(DEPFLAGS) $(CFLAGS) $(INCDIRFLAGS)
CXX_WITH_FLAGS += $(CXX) $(DEPFLAGS) $(CXXFLAGS) $(INCDIRFLAGS)
WINDRES_WITH_FLAGS += $(WINDRES) $(addprefix --preprocessor-arg=, $(DEPFLAGS)) $(INCDIRFLAGS)

#
# Convert source file path to absolute.
#

ABS_SOURCES = $(abspath $(SOURCES))
ABS_RESOURCES = $(abspath $(RESOURCES))

#
# Generate the names of object files.
#

OBJS += $(addsuffix .o, $(ABS_SOURCES))
OBJS += $(addsuffix .res.o, $(ABS_RESOURCES))

#
# Switching shell coloring off for in-IDE builds. 
#

ifeq ($(ULTIMATE_DEBUG),)
NCOLORS = $(shell tput colors 2>/dev/null)
endif

ifneq ($(NCOLORS),)
YELLOW_COLOR = \e[1;33m
PURPLE_COLOR = \e[1;35m
BLUE_COLOR = \e[1;36m
WHITE_COLOR = \e[1;37m
RESET_COLOR = \e[0m
S = @
P = @printf
else
P = @:
endif

#
# The actual rules to make the output
#

.SUFFIXES:
	MAKEFLAGS += -r

all: $(OUTPUT)

OBJS_WITH_PATH = $(addprefix $(OBJDIR)/, $(OBJS))

$(OUTPUT): $(OBJS_WITH_PATH) $(ADDITIONAL_DEPS)
	$P 'Linking $(BLUE_COLOR)$(notdir $@)$(RESET_COLOR)\n'
	$S$(strip $(or $(FINALLD),$(LD)) $(OBJS_WITH_PATH) $(LDFLAGS) $(LIBFLAGS) $(LIBDIRFLAGS) -o $@)

$(OUTLIB): $(OBJS_WITH_PATH) $(ADDITIONAL_DEPS)
	$P 'Creating static library $(BLUE_COLOR)$(notdir $@)$(RESET_COLOR)\n'
	$S$(strip $(AR) rcs $@ $(OBJS_WITH_PATH))
	
$(OBJDIR)/%.c.o: %.c $(MAKEFILE_LIST)
$(OBJDIR)/%.c.o: %.c $(OBJDIR)/%.d $(MAKEFILE_LIST)
	$P 'Compiling $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$S$(strip $(CC_WITH_FLAGS) $($(shell echo $(notdir $<) | tr a-z. A-Z_ )_FLAGS) -c -o $@ $<)
	@mv -f $(OBJDIR)/$*.Td $(OBJDIR)/$*.d

$(OBJDIR)/%.cpp.o: %.cpp $(MAKEFILE_LIST)
$(OBJDIR)/%.cpp.o: %.cpp $(OBJDIR)/%.d $(MAKEFILE_LIST)
	$P 'Compiling $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$S$(strip $(CXX_WITH_FLAGS) $($(shell echo $(notdir $<) | tr a-z. A-Z_ )_FLAGS) -c -o $@ $<)
	@mv -f $(OBJDIR)/$*.Td $(OBJDIR)/$*.d

__DEFAULT_RESOURCE_SECTION = .rodata,alloc,load,readonly,data,contents

$(OBJDIR)/%.res.o: % $(MAKEFILE_LIST)
	$P 'Objectifying $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$Scd $(dir $<) && \
	$(strip $(LD) -r -b binary -o $(abspath $@) $(notdir $<))
	$S$(OC) --rename-section .data=$(or $($(shell echo $(notdir $<) | tr a-z. A-Z_ )_SECTION),$(__DEFAULT_RESOURCE_SECTION)) $(abspath $@) $(abspath $@)
	
$(OBJDIR)/%.rc.o: %.rc $(MAKEFILE_LIST)
$(OBJDIR)/%.rc.o: %.rc $(OBJDIR)/%.d $(MAKEFILE_LIST)
	$P 'Window$$ resource compiling $(YELLOW_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	@mkdir -p $(dir $@)
	$S$(WINDRES_WITH_FLAGS) $< -o $@
	@mv -f $(OBJDIR)/$*.Td $(OBJDIR)/$*.d


$(OBJDIR)/%.d: ;
.PRECIOUS: $(OBJDIR)/%.d

#
# Coverage info generation.
#

ifndef LCOVDIR
LCOVDIR = coverage
endif

ifndef LCOVFILE
LCOVFILE = $(LCOVDIR)/coverage.info
endif

ifndef LCOVFLAGS
LCOVFLAGS = --rc lcov_branch_coverage=1
endif

LCOVFLAGS += -q

ifndef LCOVDATAPATH 
LCOVDATAPATH = $(OBJDIR)#/$(abspath .)
endif

check: $(OUTPUT)
	@mkdir -p coverage
	$Slcov -q --zerocounters -d .
	$P 'Testing $(PURPLE_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	$S$(TEST_CMD_PREFIX) $(abspath $(OUTPUT)) $(TEST_FLAGS)
	$P 'Lcov $(WHITE_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	$Slcov $(LCOVFLAGS) -o $(LCOVFILE) -c -d $(LCOVDATAPATH) 1>/dev/null 2>/dev/null 
	$P 'Genhtml $(WHITE_COLOR)$(notdir $<)$(RESET_COLOR)\n'
	$Sgenhtml $(LCOVFLAGS) --highlight --demangle-cpp $(LCOVFILE) --output-directory coverage

#
# Clean rule, removes the output, coverage info and all temporary files.
#

mostlyclean:
	rm -rf $(OBJDIR) $(CLEAN_EXTRA) $(LCOVDIR)

clean: mostlyclean
	rm -rf $(or $(OUTPUT) $(OUTLIB))

#
# Include the dependency info.
#

-include $(patsubst %,$(OBJDIR)/%.d,$(basename $(ABS_SOURCES)))

